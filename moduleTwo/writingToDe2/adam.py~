#Adam's write to DE2 program
# Import the required module.
import time
import RPi.GPIO as GPIO
from bitstring import BitArray, BitStream 
import imgproc
from imgproc import *
import write
# Set the mode to use physical numbering the pins.

img = Image("/home/pi/Desktop/381_colours.bmp")
 
print "Started code"

GPIO.setmode(GPIO.BOARD) 
GPIO.setwarnings(False)

#pins 11 is the state sent from the DE2
GPIO.setup(11, GPIO.IN)

# pin 7 is the Pi write Request 
GPIO.setup(7, GPIO.OUT)              
                        
# pin 3 is the fake clock. 
GPIO.setup(3,GPIO.OUT)

#pin 5 is the write enable
GPIO.setup(5, GPIO.OUT) 

#data bus
GPIO.setup(19, GPIO.OUT) 
GPIO.setup(21, GPIO.OUT) 
GPIO.setup(23, GPIO.OUT) 
GPIO.setup(29, GPIO.OUT)
GPIO.setup(31, GPIO.OUT) 
GPIO.setup(33, GPIO.OUT) 
GPIO.setup(35, GPIO.OUT) 
GPIO.setup(37, GPIO.OUT)  

#adress bus
GPIO.setup(40, GPIO.OUT) 
GPIO.setup(38, GPIO.OUT) 
GPIO.setup(36, GPIO.OUT) 
GPIO.setup(32, GPIO.OUT)
GPIO.setup(26, GPIO.OUT) 
GPIO.setup(24, GPIO.OUT) 
GPIO.setup(22, GPIO.OUT) 
GPIO.setup(18, GPIO.OUT)
GPIO.setup(16, GPIO.OUT) 
GPIO.setup(12, GPIO.OUT) 
GPIO.setup(10, GPIO.OUT) 
GPIO.setup(8, GPIO.OUT)  



def toDatBus( dat ):
	#pin37 is most significant bit
	GPIO.output(37, dat[0]) 
	GPIO.output(35, dat[1]) 
	GPIO.output(33, dat[2]) 
	GPIO.output(31, dat[3])
	GPIO.output(29, dat[4]) 
	GPIO.output(23, dat[5]) 
	GPIO.output(21, dat[6]) 
	GPIO.output(19, dat[7])
#	print "set DatBus to:", dat.bin
	return

def toAdBus( ad ):
	#pin26 is most significant bit
	GPIO.output(40, ad[0]) 
	GPIO.output(38, ad[1]) 
	GPIO.output(36, ad[2]) 
	GPIO.output(32, ad[3])
	GPIO.output(26, ad[4]) 
	GPIO.output(24, ad[5]) 
	GPIO.output(22, ad[6]) 
	GPIO.output(18, ad[7])
	GPIO.output(16, ad[8]) 
	GPIO.output(12, ad[9]) 
	GPIO.output(10, ad[10]) 
	GPIO.output(8, ad[11])
#	print "set AdBus to:", adress.bin
	return



		
def sendPath():
    GPIO.output(3, False) #clock and write enable to 0
    GPIO.output(5, False)
    GPIO.output(7, False)

    pathX = [10,50,300]
    pathY = [10,50,200]
    ##################
    #need to update to use len()
    length = len(pathX)
    numBytes = 3* length
#    modLength = len(pathX)
    
    done = 0
    size = 0
    
   
    while( done == 0): 
	dotCount = 0
        counter = 0
  #      GPIO.output(7, True)
        print "pi request =1"
        GPIO.output(3,True) #fake clock high
        pass
        GPIO.output(3,False)
        
        if(numBytes > 4092):
		size = 4092
		numBytes -= 4092
		#Fist byte iforms DE2 if another transfer will be needed
		#after the DE2 finshes reading the current data being input
		adress = BitArray(bin='{0:012b}'.format(counter))
		data = BitArray('0b00000001') # has more data to send after this
		print "PATH TOO LONG: sent", data.bin , "to", adress.bin
		toDatBus( data )
		toAdBus( adress )
		GPIO.output(5,True) #write enable =1
		GPIO.output(3,True) #fake clock high
		pass
		GPIO.output(3,False)
		GPIO.output(5,False) 
		counter += 1


		#second + third byte is # of bytes sending (normally 4093)    
		adress = BitArray(bin='{0:012b}'.format(counter)) 
		data = BitArray('0b00001111')
		toDatBus( data )
		toAdBus( adress )
		GPIO.output(5,True) #write enable =1
		GPIO.output(3,True) #fake clock high
		pass
		GPIO.output(3,False)
		GPIO.output(5,False)
		counter += 1

		adress = BitArray(bin='{0:012b}'.format(counter)) 
		data = BitArray('0b11111100')
		toDatBus( data )
		toAdBus( adress )
		GPIO.output(5,True) #write enable =1
		GPIO.output(3,True) #fake clock high
		pass
		GPIO.output(3,False)
		GPIO.output(5,False) 
		counter += 1
	else:
		#last chunck of data
		done =1
		size = length
		#First byte informs DE2 if another transfer will be needed
		#after DE2 finshes reading the current data being sent
		adress = BitArray(bin='{0:012b}'.format(counter))
		data = BitArray('0b00001100') 	#has no more data to send after this
		toDatBus( data )
		toAdBus( adress )
		GPIO.output(5,True) #write enable =1
		GPIO.output(3,True) #fake clock high
		pass
		GPIO.output(3,False)
		GPIO.output(5,False) 


		numLeft = BitArray(bin='{0:016b}'.format(numBytes))

		mostSig = numLeft[0:8]

		leastSig = numLeft[8:16]
		print "LAST number of bits sending=", numLeft.bin,"split into", mostSig.bin , leastSig.bin

		#second + third byte is # of bytes sending (normally 4093)    
		adress = BitArray(bin='{0:012b}'.format(counter)) 
		data = mostSig
		toDatBus( data )
		toAdBus( adress )
		GPIO.output(5,True) #write enable =1
		GPIO.output(3,True) #fake clock high
		pass
		GPIO.output(3,False)
		GPIO.output(5,False) 
		counter += 1

		adress = BitArray(bin='{0:012b}'.format(counter)) 
		data = leastSig
		toDatBus( data )
		toAdBus( adress )
		GPIO.output(5,True) #write enable =1
		GPIO.output(3,True) #fake clock high
		pass
		GPIO.output(3,False)
		GPIO.output(5,False) 
		counter += 1
            
           
	print "dotCout vs size check"
	while (dotCount < size): 
	    numLeft = BitArray(bin='{0:016b}'.format(pathX.pop()))
	    mostSig = numLeft[0:8]
	    leastSig = numLeft[8:16]
	    numRight = BitArray(bin='{0:08b}'.format(pathY.pop()))
	    print "X was", mostSig.bin, leastSig.bin, "Y was", numRight.bin
	    
	    data = mostSig
	    adress = BitArray(bin='{0:012b}'.format(counter))
	    toDatBus( data )
	    toAdBus( adress )
	    GPIO.output(5,True) #write enable =1
	    GPIO.output(3,True) #fake clock high
	    pass
	    GPIO.output(3,False)
	    GPIO.output(5,False)
	    print "sent XmostSig", data.bin, "to", adress.bin
	    counter += 1
	    


	    data = leastSig
	    adress = BitArray(bin='{0:012b}'.format(counter))
	    toDatBus( data )
	    toAdBus( adress )
	    GPIO.output(5,True) #write enable =1
	    GPIO.output(3,True) #fake clock high
	    pass
	    GPIO.output(3,False)
	    GPIO.output(5,False)
	    print "sent XleastSig", data.bin, "to", adress.bin
	    counter += 1
	   
	    
	    data = numRight
	    adress = BitArray(bin='{0:012b}'.format(counter))
	    toDatBus( data )
	    toAdBus( adress )
	    GPIO.output(5,True) #write enable =1
	    GPIO.output(3,True) #fake clock high
	    pass
	    GPIO.output(3,False)
	    GPIO.output(5,False)
	    print "sent Y", data.bin, "to", adress.bin
	    counter += 1


	    dotCount +=1 


        if(done == 1):
	    GPIO.output(7, True)
	    print "sending DE2 path"
	    while (GPIO.input(11)):
	#	print "waiting for DE2 to flip ack bit"
		pass
	    print "DE2 got THE PATH, done path"
	#    GPIO.output(7,True)
            return
        else:
            GPIO.output(7, True)
 	    while (GPIO.input(11)):
	#	print "waiting for DE2 to flip ack bit"
		pass
	    print "DE2 got THE PATH, sending another"
            GPIO.output(7,False)
        
        
#        #input dropping to 0 will signal DE2 ready for new data
#        while (GPIO.input(11)):
#            pass
	
print "starting mode 1-5 test"
write.writeToDe2()
print" sleeping for 5"
time.sleep(5)
sendPath()
print "adam made me :D" 
