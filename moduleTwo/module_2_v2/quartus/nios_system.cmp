	component nios_system is
		port (
			clk_clk                     : in    std_logic                     := 'X';             -- clk
			keys_export                 : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			leds_export                 : out   std_logic_vector(3 downto 0);                     -- export
			reset_reset_n               : in    std_logic                     := 'X';             -- reset_n
			sdram_wire_addr             : out   std_logic_vector(11 downto 0);                    -- addr
			sdram_wire_ba               : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_wire_cas_n            : out   std_logic;                                        -- cas_n
			sdram_wire_cke              : out   std_logic;                                        -- cke
			sdram_wire_cs_n             : out   std_logic;                                        -- cs_n
			sdram_wire_dq               : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			sdram_wire_dqm              : out   std_logic_vector(1 downto 0);                     -- dqm
			sdram_wire_ras_n            : out   std_logic;                                        -- ras_n
			sdram_wire_we_n             : out   std_logic;                                        -- we_n
			sdram_clk_clk               : out   std_logic;                                        -- clk
			lcd_data_DATA               : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DATA
			lcd_data_ON                 : out   std_logic;                                        -- ON
			lcd_data_BLON               : out   std_logic;                                        -- BLON
			lcd_data_EN                 : out   std_logic;                                        -- EN
			lcd_data_RS                 : out   std_logic;                                        -- RS
			lcd_data_RW                 : out   std_logic;                                        -- RW
			sd_card_b_SD_cmd            : inout std_logic                     := 'X';             -- b_SD_cmd
			sd_card_b_SD_dat            : inout std_logic                     := 'X';             -- b_SD_dat
			sd_card_b_SD_dat3           : inout std_logic                     := 'X';             -- b_SD_dat3
			sd_card_o_SD_clock          : out   std_logic;                                        -- o_SD_clock
			audio_clk_clk               : out   std_logic;                                        -- clk
			clk_27_clk                  : in    std_logic                     := 'X';             -- clk
			sram_pixel_DQ               : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			sram_pixel_ADDR             : out   std_logic_vector(17 downto 0);                    -- ADDR
			sram_pixel_LB_N             : out   std_logic;                                        -- LB_N
			sram_pixel_UB_N             : out   std_logic;                                        -- UB_N
			sram_pixel_CE_N             : out   std_logic;                                        -- CE_N
			sram_pixel_OE_N             : out   std_logic;                                        -- OE_N
			sram_pixel_WE_N             : out   std_logic;                                        -- WE_N
			vga_controller_CLK          : out   std_logic;                                        -- CLK
			vga_controller_HS           : out   std_logic;                                        -- HS
			vga_controller_VS           : out   std_logic;                                        -- VS
			vga_controller_BLANK        : out   std_logic;                                        -- BLANK
			vga_controller_SYNC         : out   std_logic;                                        -- SYNC
			vga_controller_R            : out   std_logic_vector(9 downto 0);                     -- R
			vga_controller_G            : out   std_logic_vector(9 downto 0);                     -- G
			vga_controller_B            : out   std_logic_vector(9 downto 0);                     -- B
			dual_port_ram_s2_address    : in    std_logic_vector(11 downto 0) := (others => 'X'); -- address
			dual_port_ram_s2_chipselect : in    std_logic                     := 'X';             -- chipselect
			dual_port_ram_s2_clken      : in    std_logic                     := 'X';             -- clken
			dual_port_ram_s2_write      : in    std_logic                     := 'X';             -- write
			dual_port_ram_s2_readdata   : out   std_logic_vector(7 downto 0);                     -- readdata
			dual_port_ram_s2_writedata  : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- writedata
			clk_pi_clk                  : in    std_logic                     := 'X';             -- clk
			de2_state_export            : out   std_logic_vector(2 downto 0);                     -- export
			pi_request_export           : in    std_logic                     := 'X'              -- export
		);
	end component nios_system;

